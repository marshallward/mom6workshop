====================
Contributing to MOM6
====================

:author: Marshall Ward
:description: How to contribute to MOM6
:date: 2022-10-18
:url: https://marshallward.org/mom6workshop/contrib.html
:preface:
   TODO

----

Presentation is available at

https://marshallward.org/mom6workshop/contrib.html


The MOM6 Repository
===================

.. image:: img/mom6repo.png
   :target: https://github.com/NOAA-GFDL/MOM6.git

MOM6-examples pulls from this repository.


The MOM6 Consortium
===================

.. image:: img/consortium.svg
   :target: https://github.com/mom-ocean/MOM6.git
   :width: 80%


Cloning
=======

Get the repository::

   $ git clone https://github.com/NOAA-GFDL/MOM6.git --recursive

This creates a *remote* to NOAA-GFDL named ``origin``.

.. code::

   $ git remote -v
   origin	https://github.com/NOAA-GFDL/MOM6.git (fetch)
   origin	https://github.com/NOAA-GFDL/MOM6.git (push)

Exercise:
   Go to GitHub, fork MOM6, and create a new remote


Solution
========

1. Log into GitHub, go to MOM6:

   https://github.com/NOAA-GFDL/MOM6.git

2. Fork MOM6 to your account:

   https://github.com/marshallward/MOM6.git

3. Create a remote to your new GitHub repo::

      $ git remote add marshall https://github.com/marshallward/MOM6.git

4. Sync to the remote::

      $ git push marshall dev/gfdl


Branching
=========

You want to start a new project!  Create a new *branch*:

.. code:: sh

   $ git checkout dev/gfdl       # Switch to dev/gfdl
   $ git pull                    # Sync with origin
   $ git branch my_feature       # Create a new branch
   $ git checkout my_feature     # Switch to new branch

Changes to ``my_feature`` will not alter ``dev/gfdl``.


Changing the Code
=================

Add a welcome message:

.. code:: diff

   diff --git a/src/core/MOM.F90 b/src/core/MOM.F90
   index 267a162b0..17d5259c8 100644
   --- a/src/core/MOM.F90
   +++ b/src/core/MOM.F90
   @@ -1912,6 +1912,8 @@ subroutine initialize_MOM(Time, Time_init, param_file, dirs, CS, restart_CSp, &
   
      CS%Time => Time
   
   +  print *, "Welcome to MOM6!"
   +
      id_clock_init = cpu_clock_id('Ocean Initialization', grain=CLOCK_SUBCOMPONENT)
      call cpu_clock_begin(id_clock_init)

Or use your patch from "MOM6 internals"


Diagnostic patch
----------------

.. include:: doc/ens.patch
   :code: diff


Verify Changes
==============

Check status::

   $ git status
   HEAD detached at 5201c34a3
   Changes not staged for commit:
     (use "git add <file>..." to update what will be committed)
     (use "git restore <file>..." to discard changes in working directory)
   	modified:   src/core/MOM_CoriolisAdv.F90
   
   no changes added to commit (use "git add" and/or "git commit -a")

Add file::

   $ git add src/core/MOM_CoriolisAdv.F90


Commit Changes
==============

Commit the file::

   $ git commit
   [my_feature 02244bd3b] Enstrophy density diagnostic
   1 file changed, 13 insertions(+)
   
Write a meaningful message:

.. image:: img/commit_log.png


Commits as email
================

* Pre-git, commits were *emails* sent to maintainers

   * The patch was the commit
   
   * The log was the email (subject + body)

* Emails follow a standard format (RFC 5822)

   * "Lines â€¦ SHOULD be limited to 78 characters"
   
   * Subject reduced to ~50, leave space for hash

The closer you follow these rules, the better the results


====

.. image:: img/linus_dirk.png
   :target: https://www.youtube.com/watch?v=H8Gd9t7FQqI
   :width: 60%

Linus Torvalds, Linux OSS 2020

   Commit messages to me are almost as important as the code change itself.

   If you can explain the code change to me, I will trust the code.


Preparing the Pull Request
==========================

GitHub handles *pull requests* (PRs) between repositories.

.. code:: sh

   $ git fetch origin dev/gfdl      # Update the target branch
   $ git checkout my_feature        # switch to feature
   $ git rebase -i dev/gfdl         # sync commits
   $ git push marshall my_feature   # Push to personal repo

The PR moves commits between repositories.


Minor Edits
===========

Use *amends* and *force pushes* for minor changes:

.. code:: sh

   $ vim src/my_file.F90                     # Modify code
   $ git add src/my_file.F90                 # Add to commit
   $ git commit --amend                      # Change the commit
   $ git push --force marshall my_feature    # Rewrite history

Examples:

* bugfixes
* whitespace fixes
* missing documentation

No one cares about typos!  Don't put them in the history


Submit to MOM6
==============

.. image:: img/new_pr.png


CI Testing
==========

Continuous Integration checks all pull requests:

.. image:: img/failed_tests.png

This one had problems!


``.testing``
============

GitHub Actions run the internal test suite

.. code::

   $ cd MOM6-examples/src/MOM6
   $ cd .testing
   $ make -j
   $ make -j test

Results:

1. ``dev/gfdl`` was out of date (missing MacOS fix)

2. New diagnostic was missing from OpenMP directives


Gaea Regression
===============

.. image:: img/mom_validate.svg


Final Approval
==============

If all of the tests pass, then a human being gets involved and evaluates the
contribution.

Three options:

* Merge
* Rebase
* Squash


GitHub Merge
============

GitHub merges are "non-fast-forward".   They create a *merge commit*.

.. image:: img/git_ff.png
   :width: 50%

This preserves the history of the original branch.


Epilogue: Merge to ``main``
===========================

TODO
