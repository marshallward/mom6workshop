==============
MOM6 Internals
==============

:author: Marshall Ward
:description: Tour of MOM6 architecture
:date: 2022-10-18
:url: https://marshallward.org/mom6workshop/internals.html
:preface:
   TODO

----

Presentation is available at

https://marshallward.org/mom6workshop/internals.html


MOM6 directory tree
===================

===============   =================================
Directory         Description
===============   =================================
``src/``          Model code, including solvers
``config_src/``   Configurable components
``pkg/``          Dependencies linked into ``src/``
``doc/``          Documentation
``ac/``           Autoconf build
===============   =================================


``config_src/drivers``
======================

===================     =========================
Directory               Driver
===================     =========================
``solo_driver``         Ocean-only
``ice_solo_driver``     Ice-ocean (MOM6-SIS2)
``FMS_cap``             GFDL (FMS) coupler
``nuopc_cap``           NUOPC coupler (CESM, UFS)
``mct_cap``             MCT coupler
===================     =========================

New models probably need to develop their own drivers.


A Minimal Driver
================

.. code:: fortran

   call initialize_MOM(MOM_CS)
   call finish_MOM_initialization(MOM_CS)

   do while (time < time_end)
     ! update fluxes
     ! update time

     do n = 1, n_steps
       call step_MOM(fluxes, MOM_CS)
     enddo
   enddo

   call MOM_end()

(Very schematic, not a real program!)

MOM steps are mostly oblivious to driver structure


Other configs
=============

``config_src/memory``
   Symmetric, Non-symmetric, static (presented later)

``config_src/infra``
   FMS1, FMS2

``config_src/external``
   BGC, Data assimilation, Python interface, etc.

.. TODO example?  cheng's builds?


``src/``
========

======================  ============================
Directory               Description
======================  ============================
``core/``               Init, time-step, solvers
``parameterizations/``  Viscosity, mixing, diabatic
``tracer/``             Tracer dynamics
``ALE/``                Vertical remapping
``diagnostics/``        Diagonostic management
``user/``               Preset forcing, topography
======================  ============================

Also see ``framework/``, ``equation_of_state/``, etc


Module Format
=============

.. include:: doc/MOM_geothermal.F90
   :code: fortran

* One module per file

* Modules communicate by **control structures** (CS)

.. notes::

   One consequence of having no state is that functions have many, many
   arguments.  An object-oriented approach could help reduce this.


Module design
=============

* CS are *private*: contents hidden from other modules

* Interface is *public*, dependencies are *explicit*

* No internal module variables (i.e. no "state")

* Contents are *documented* (including units!)

Module functions can modify external fields, but other modules cannot see
inside the CS


Main Loop
=========

``step_MOM()``

================  =========================
Process           Subroutine
================  =========================
Dynamic Core      ``step_MOM_dynamics()``
Diabatic forcing  ``step_MOM_thermo()``
Tracers           ``step_MOM_tracer_dyn()``
================  =========================

Ordering is somewhat configurable


"Outer" Dynamic core
====================

``step_MOM_dynamics()``

===================  ============================
Process              Subroutine
===================  ============================
GM diffusion         ``thickness_diffuse()``
Bottom drag          ``set_viscous_BBL()``
Flow transport       ``step_MOM_dyn_split_RK2()``
Submesoscale         ``mixedlayer_restrat()``
Mesoscale eddies     ``step_forward_MEKE()``
===================  ============================

.. notes::

   Most ocean-specific parameterizations appear here


"Inner" Dynamic Core
====================

``step_MOM_dyn_split_RK2()``

===================================    ==========================
Process                                Subroutine
===================================    ==========================
:math:`f \hat{z} \times \mathbf{u}`    ``CorAdCalc()``
:math:`-\nabla p`                      ``PressureForce()``
Vertical Viscosity                     ``vertvisc()``
Barotropic                             ``btstep()``
Mass/Volume Balance                    ``continuity()``
Horizontal viscosity                   ``horizontal_viscosity()``
===================================    ==========================

.. notes::

   This repeats in a predictor/corrector-like algorithm.


Diabatic Forcing
================

``MOM_diabatic_driver.F90``

Many parameterizations are applied via ``diabatic()``

* KPP (vertical) mixing
* Bulk mixed layer
* Convective mixing (CVMix)
* Geothermal heating
* Shortwave radiative heating

If ``adiabatic()``, comparatively less happens here

.. notes::

   There are two diabatic functions: diabatic_ALE() and layered_diabatic()
   (actually two ALE functions!  But nevermind that)


Tracers
=======

``MOM_tracer_{advect,hor_diff}.F90``

* ``advect_tracer()``

   * ``advect_x()``

   * ``advect_y()``

* ``tracer_hordiff()``

   * ``neutral_diffusion()``

* ``tracer_vertdiff()`` (diabatic)

Certain tracers are implemented in-code (age, CFC, etc)

.. notes::

   OBC corrections are prevalent here


``pkg/``
========

================  ========================
``CVMix-src/``    Convective mixing
``GSW-Fortran/``  Equation of state (TEOS)
================  ========================

Code "hidden" in submodules, inserted with symbolic links


MOM6 Idioms
===========


Metric Grids
============

.. image:: img/Arakawa_C_grid.png

:math:`(i,j)` follows the "northeast convention"


Stencil Domains
===============

.. list-table::

   * - .. image:: img/Horizontal_NE_indexing_sym.png

     - Compute Domain
         Physical values

       Data Domain
         Include halos

       Global Domain
         Global indexing

Stencils like
:math:`u^{n+1}_i = u^n_i + \nu \left(u^n_{i-1} - 2 u^n_i + u^n_{i+1}\right)`
need values beyond the compute domain.


Index Bounds
============

Bounds stored in ``ocean_grid_type``, ``G``

.. list-table::
   :widths: 50 50 

   * - =================
       ``G%isc:G%iec``
       ``G%iscB:G%iecB``
       ``G%isd:G%ied``
       ``G%isg:G%ieg``
       ...
       =================  

     - .. code::

          do j = G%jsc, G%jec
            do i = G%isc, G%iec
              h(i,j) = ...
            enddo
          enddo

Bounds may extend into halos (e.g. derivatives)


Memory Layout
=============

.. list-table::

   * - Symmetric:

       .. figure:: img/Horizontal_NE_indexing_sym.png


     - Nonsymmetric:

       .. figure:: img/Horizontal_NE_indexing_nonsym.png

* Symmetric grids have additional west/south points

* Index values unchanged (but symmetric B-grid is zero-indexed)

.. notes::

   If periodic, they match the east/north points


Index Macros
============

Generalized indices with ``#include <MOM_memory.h>``

==========  ==================================
Field       Declaration
==========  ==================================
Center      ``h(SZI_(G), SZJ_(G), SZK_(G))``
East Face   ``u(SZIB_(G), SZJ_(G), SZK_(G))``
North Face  ``v(SZI_(G), SZJB_(G), SZK_(G))``
Vertex      ``q(SZIB_(G), SZJB_(G), SZK_(G))``
==========  ==================================

These ensure that edge-indices are zero-indexed

(Also see ``ALLOC_()``, ``DEALLOC_()``, ``ALLOCABLE_``)


Parallelization
===============

.. image:: img/halo.svg

MOM is single-pass: 4 sides and 4 corners concurrently

(Other models are two-pass: N/S then E/W)


Message Passing
===============

``create_group_pass(group, array, domain)``
   Create a "group pass" for an array

``do_group_pass(group, domain)``
   Immediately update the halo ("blocking")

``start_group_pass(group, domain)``
   Begin a halo update ("nonblocking")

``complete_group_pass(group, domain)``
   Wait until a halo update has completed

(`MOM_checksums`_ API)

.. _MOM_checksums:
   https://mom6.readthedocs.io/en/main/api/generated/modules/mom_coms.html#f/mom_coms


Example halo update
===================

.. code:: fortran

   call create_group_pass(CS%pass_uv, u, v, G%Domain, &
                          halo=max(2,cont_stencil))

   u(:,:,:) = ...        ! Update compute domains
   v(:,:,:) = ...

   if (G%nonblocking_updates) &
      call start_group_pass(CS%pass_uv, G%Domain, clock=id_clock_pass)

   ! Do some work unrelated to u and v

   if (G%nonblocking_updates) then
     call complete_group_pass(CS%pass_uv, G%Domain, clock=id_clock_pass)
   else
     call do_group_pass(CS%pass_uv, G%Domain, clock=id_clock_pass)
   endif


.. Masking
   =======

   TODO


Diagnostics
===========

``register_diag_field()``

.. code:: fortran

   CS%id_Kh_h = register_diag_field('ocean_model', 'Khh', &
      diag%axesTL, Time, &
      'Laplacian Horizontal Viscosity at h Points', &
      'm2 s-1', &
      conversion=(US%L_to_m**2)*US%s_to_T)

``post_data()``

.. code:: fortran

   if (CS%id_Kh_h > 0) call post_data(CS%id_Kh_h, Kh_h, CS%diag)

(`MOM_diag_mediator`_ API)

.. _MOM_diag_mediator:
   https://mom6.readthedocs.io/en/main/api/generated/modules/mom_diag_mediator.html#f/mom_diag_mediator


Input Parameters
================

Define ``MOM_input`` parameters with ``get_param()``:

.. code:: fortran

   call get_param(param_file, mdl, "KH", Kh, &
       "The background Laplacian horizontal viscosity", &
       units="m2 s-1", &
       default=0.0, &
       scale=(US%m_to_L**2)*US%T_to_s, &
       do_not_log=.not.CS%Laplacian)

(`MOM_file_input`_ API)

.. _MOM_file_input:
   https://mom6.readthedocs.io/en/main/api/generated/modules/mom_file_parser.html#f/mom_file_parser


Checksums
=========

Verify the reproducibility of fields:

.. code:: fortran

   ! Cell center
   call hchksum(Kh_h, "Kh_h", G%HI, scale=(US%L_to_m**2)*US%s_to_T)
   ! Cell faces
   call uvchksum("Kh_[uv]", Kh_u, Kh_v, G%HI, &
                 scale=(US%L_to_m**2)*US%s_to_T, scalar_pair=.true.)
   ! Cell vertex
   call Bchksum(Kh_q, "Kh_q", G%HI, scale=(US%L_to_m**2)*US%s_to_T)

See "MOM6 development" for more info

(`MOM_checksums`_ API)

.. _MOM_checksums:
   https://mom6.readthedocs.io/en/main/api/generated/modules/mom_checksums.html#f/mom_checksums


Timers
======

.. code:: fortran

   ! Initialize timer
   id_clock_ocean = cpu_clock_id('Ocean', grain=CLOCK_COMPONENT)

   ! Main loop
   
   ! Start timer
   call cpu_clock_begin(id_clock_ocean)

   ! ... do some task

   ! End timer
   call cpu_clock_end(id_clock_ocean)

Results printed to stdout at end of run


Exercise
========

Create a new diagnostic and generate the output.

An simple example is enstrophy density,
:math:`\tfrac{1}{2} \left| \nabla \times \mathbf{u} \right|^2`, i.e. square of
vorticity.  You could also use its potential vorticity equivalent.

You are welcome to create your own diagnostic!


Outline
-------

1. Register with ``register_diag_field()``, save id

2. Compute the field

3. Pass id and field to ``post_data()``

4. Enable the diagnostic in ``diag_table``
